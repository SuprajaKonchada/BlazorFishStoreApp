@page "/fish"
@using BlazorFishStoreApp.Services
@using BlazorFishStoreApp.Models
@inject FishService FishService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<h3>Fish List</h3>
<button @onclick="AddFishAsync" class="btn btn-success mb-2">Add Fish</button>

@if (fishes == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Age(in months)</th>
                <th>Price(in rupees)</th>
                <th>Lifespan(in years)</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var fish in fishes)
            {
                <tr>
                    <td>@fish.Name</td>
                    <td>@fish.Age</td>
                    <td>@fish.Price</td>
                    <td>@fish.Lifespan</td>
                    <td>
                        <button @onclick="() => EditFishAsync(fish.Id)" class="btn btn-primary btn-sm">Edit</button>
                        <button @onclick="() => DeleteFish(fish.Id)" class="btn btn-danger btn-sm">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Fish> fishes;
    private string errorMessage;

    /// <summary>
    /// Initializes the component asynchronously and retrieves the list of fishes.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        try
        {
            fishes = await FishService.GetFishesAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
    }

    /// <summary>
    /// Navigates to the create fish page.
    /// </summary>
    private async Task AddFishAsync()
    {
        try
        {
            NavigationManager.NavigateTo("/fish/create");
            await Task.CompletedTask;
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred while navigating to create page: {ex.Message}";
        }
    }

    /// <summary>
    /// Navigates to the edit fish page for the specified fish ID.
    /// </summary>
    /// <param name="id">The ID of the fish to edit.</param>
    private async Task EditFishAsync(int id)
    {
        try
        {
            NavigationManager.NavigateTo($"/fish/edit/{id}");
            await Task.CompletedTask;
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred while navigating to edit page: {ex.Message}";
        }
    }
    
    /// <summary>
    /// Deletes the fish with the specified ID.
    /// </summary>
    /// <param name="id">The ID of the fish to delete.</param>
    private async Task DeleteFish(int id)
    {
        try
        {
            await FishService.DeleteFishAsync(id);
            fishes = await FishService.GetFishesAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred while deleting: {ex.Message}";
        }
    }
}
